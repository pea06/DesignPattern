팩토리 패턴
 객체를 생성하는 인터페이스를 미리 정의하고, 인스턴스를 만들 클래스의 결정을 extends 받는 클래스에게 내리는 패턴이다
 팩토리 패턴에서는 클래스의 인스턴스를 만드는 시점을 서브 클래스로 미룹니다.

즉, 여러 개의 extends 받은 클래스를 가진 슈퍼 클래스가 있을 때 인풋에 따라 하나의 자식 클래스의 인스턴스를 리턴해주는 방식

쓰는 이유
-어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때
-생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때

장점
1. 팩토리 패턴은 클라이언트로부터 상속받은 클래스의 인스턴스화를 제거하여 서로간의 종속성을 낮추고 결혼도를 느슨하게 하여
확장을 쉽게한다. ex) Clock class에대한 수정혹은 삭제가 있어도 클라이언트는 알수 없어

2.팩토리 패턴은 클라이언트와 구현 객체들 사이에 추상화를 제공합니다.

단점
1. 새로 생성할 객체가 늘어날 때마다, Factory 클래스에 추가해야 되기 때문에 클래스가 많아짐.